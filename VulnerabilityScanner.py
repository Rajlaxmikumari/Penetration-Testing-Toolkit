import requests
import re
from bs4 import BeautifulSoup
from utils.logger import setup_logger

logger = setup_logger('vulnerability_scanner')

class VulnerabilityScanner:
    def __init__(self, target):
        self.target = target
        self.vulnerabilities = []
        
    def scan_xss(self):
        test_payload = "<script>alert('XSS')</script>"
        try:
            response = requests.get(f"{self.target}/search?q={test_payload}")
            if test_payload in response.text:
                self.vulnerabilities.append({
                    'type': 'XSS',
                    'severity': 'high',
                    'description': 'Reflected XSS vulnerability found'
                })
                logger.warning("XSS vulnerability detected!")
        except Exception as e:
            logger.error(f"XSS scan error: {e}")
    
    def scan_sqli(self):
        test_payload = "' OR '1'='1"
        try:
            response = requests.get(f"{self.target}/products?id={test_payload}")
            if "error in your SQL syntax" in response.text.lower():
                self.vulnerabilities.append({
                    'type': 'SQLi',
                    'severity': 'critical',
                    'description': 'SQL injection vulnerability found'
                })
                logger.warning("SQL injection vulnerability detected!")
        except Exception as e:
            logger.error(f"SQLi scan error: {e}")
    
    def scan_headers(self):
        try:
            response = requests.get(self.target)
            headers = response.headers
            
            if 'server' in headers:
                logger.info(f"Server header: {headers['server']}")
                
            if 'x-powered-by' in headers:
                logger.info(f"X-Powered-By: {headers['x-powered-by']}")
                
            security_headers = [
                'x-frame-options',
                'x-xss-protection',
                'x-content-type-options',
                'content-security-policy'
            ]
            
            for header in security_headers:
                if header not in headers:
                    self.vulnerabilities.append({
                        'type': 'Missing Header',
                        'severity': 'medium',
                        'description': f'Missing security header: {header}'
                    })
                    logger.warning(f"Missing security header: {header}")
        except Exception as e:
            logger.error(f"Header scan error: {e}")
    
    def scan(self):
        logger.info(f"Starting vulnerability scan for {self.target}")
        self.scan_xss()
        self.scan_sqli()
        self.scan_headers()
        
        if not self.vulnerabilities:
            logger.info("No common vulnerabilities detected")
        
        return self.vulnerabilities
